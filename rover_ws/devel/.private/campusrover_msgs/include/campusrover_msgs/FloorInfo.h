// Generated by gencpp from file campusrover_msgs/FloorInfo.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_FLOORINFO_H
#define CAMPUSROVER_MSGS_MESSAGE_FLOORINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campusrover_msgs
{
template <class ContainerAllocator>
struct FloorInfo_
{
  typedef FloorInfo_<ContainerAllocator> Type;

  FloorInfo_()
    : current_floor(0)
    , target_floor(0)  {
    }
  FloorInfo_(const ContainerAllocator& _alloc)
    : current_floor(0)
    , target_floor(0)  {
  (void)_alloc;
    }



   typedef int32_t _current_floor_type;
  _current_floor_type current_floor;

   typedef int32_t _target_floor_type;
  _target_floor_type target_floor;





  typedef boost::shared_ptr< ::campusrover_msgs::FloorInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::FloorInfo_<ContainerAllocator> const> ConstPtr;

}; // struct FloorInfo_

typedef ::campusrover_msgs::FloorInfo_<std::allocator<void> > FloorInfo;

typedef boost::shared_ptr< ::campusrover_msgs::FloorInfo > FloorInfoPtr;
typedef boost::shared_ptr< ::campusrover_msgs::FloorInfo const> FloorInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::FloorInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::FloorInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::FloorInfo_<ContainerAllocator1> & lhs, const ::campusrover_msgs::FloorInfo_<ContainerAllocator2> & rhs)
{
  return lhs.current_floor == rhs.current_floor &&
    lhs.target_floor == rhs.target_floor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::FloorInfo_<ContainerAllocator1> & lhs, const ::campusrover_msgs::FloorInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::FloorInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::FloorInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::FloorInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::FloorInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::FloorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::FloorInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::FloorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51cf3c1c3025aae9deca720d6eb4681b";
  }

  static const char* value(const ::campusrover_msgs::FloorInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51cf3c1c3025aae9ULL;
  static const uint64_t static_value2 = 0xdeca720d6eb4681bULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::FloorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/FloorInfo";
  }

  static const char* value(const ::campusrover_msgs::FloorInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::FloorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 current_floor\n"
"int32 target_floor\n"
;
  }

  static const char* value(const ::campusrover_msgs::FloorInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::FloorInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_floor);
      stream.next(m.target_floor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FloorInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::FloorInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::FloorInfo_<ContainerAllocator>& v)
  {
    s << indent << "current_floor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_floor);
    s << indent << "target_floor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_floor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_FLOORINFO_H
