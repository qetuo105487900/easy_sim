// Generated by gencpp from file campusrover_msgs/MapInfoRequest.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_MAPINFOREQUEST_H
#define CAMPUSROVER_MSGS_MESSAGE_MAPINFOREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/TransformStamped.h>
#include <campusrover_msgs/Room.h>
#include <campusrover_msgs/RoomConnected.h>

namespace campusrover_msgs
{
template <class ContainerAllocator>
struct MapInfoRequest_
{
  typedef MapInfoRequest_<ContainerAllocator> Type;

  MapInfoRequest_()
    : location()
    , floor(0)
    , tf()
    , rooms()
    , connections()  {
    }
  MapInfoRequest_(const ContainerAllocator& _alloc)
    : location(_alloc)
    , floor(0)
    , tf(_alloc)
    , rooms(_alloc)
    , connections(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _location_type;
  _location_type location;

   typedef int32_t _floor_type;
  _floor_type floor;

   typedef  ::geometry_msgs::TransformStamped_<ContainerAllocator>  _tf_type;
  _tf_type tf;

   typedef std::vector< ::campusrover_msgs::Room_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::campusrover_msgs::Room_<ContainerAllocator> >> _rooms_type;
  _rooms_type rooms;

   typedef std::vector< ::campusrover_msgs::RoomConnected_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::campusrover_msgs::RoomConnected_<ContainerAllocator> >> _connections_type;
  _connections_type connections;





  typedef boost::shared_ptr< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MapInfoRequest_

typedef ::campusrover_msgs::MapInfoRequest_<std::allocator<void> > MapInfoRequest;

typedef boost::shared_ptr< ::campusrover_msgs::MapInfoRequest > MapInfoRequestPtr;
typedef boost::shared_ptr< ::campusrover_msgs::MapInfoRequest const> MapInfoRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::MapInfoRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::MapInfoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.location == rhs.location &&
    lhs.floor == rhs.floor &&
    lhs.tf == rhs.tf &&
    lhs.rooms == rhs.rooms &&
    lhs.connections == rhs.connections;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::MapInfoRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::MapInfoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64495e6b9a1d310cb07a4f1c52ccab95";
  }

  static const char* value(const ::campusrover_msgs::MapInfoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64495e6b9a1d310cULL;
  static const uint64_t static_value2 = 0xb07a4f1c52ccab95ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/MapInfoRequest";
  }

  static const char* value(const ::campusrover_msgs::MapInfoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string location\n"
"int32 floor\n"
"geometry_msgs/TransformStamped tf\n"
"campusrover_msgs/Room[] rooms\n"
"campusrover_msgs/RoomConnected[] connections\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TransformStamped\n"
"# This expresses a transform from coordinate frame header.frame_id\n"
"# to the coordinate frame child_frame_id\n"
"#\n"
"# This message is mostly used by the \n"
"# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n"
"# See its documentation for more information.\n"
"\n"
"Header header\n"
"string child_frame_id # the frame id of the child frame\n"
"Transform transform\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: campusrover_msgs/Room\n"
"string room\n"
"geometry_msgs/Pose  position\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: campusrover_msgs/RoomConnected\n"
"string[] connection\n"
;
  }

  static const char* value(const ::campusrover_msgs::MapInfoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location);
      stream.next(m.floor);
      stream.next(m.tf);
      stream.next(m.rooms);
      stream.next(m.connections);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapInfoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::MapInfoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::MapInfoRequest_<ContainerAllocator>& v)
  {
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.location);
    s << indent << "floor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.floor);
    s << indent << "tf: ";
    s << std::endl;
    Printer< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.tf);
    s << indent << "rooms[]" << std::endl;
    for (size_t i = 0; i < v.rooms.size(); ++i)
    {
      s << indent << "  rooms[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::campusrover_msgs::Room_<ContainerAllocator> >::stream(s, indent + "    ", v.rooms[i]);
    }
    s << indent << "connections[]" << std::endl;
    for (size_t i = 0; i < v.connections.size(); ++i)
    {
      s << indent << "  connections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::campusrover_msgs::RoomConnected_<ContainerAllocator> >::stream(s, indent + "    ", v.connections[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_MAPINFOREQUEST_H
