// Generated by gencpp from file campusrover_msgs/DoorResult.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_DOORRESULT_H
#define CAMPUSROVER_MSGS_MESSAGE_DOORRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Header.h>

namespace campusrover_msgs
{
template <class ContainerAllocator>
struct DoorResult_
{
  typedef DoorResult_<ContainerAllocator> Type;

  DoorResult_()
    : left_door_status()
    , rate_bottom_left(0.0)
    , rate_door_left(0.0)
    , rate_middle_left(0.0)
    , right_door_status()
    , rate_bottom_right(0.0)
    , rate_door_right(0.0)
    , rate_middle_right(0.0)
    , locate()  {
    }
  DoorResult_(const ContainerAllocator& _alloc)
    : left_door_status(_alloc)
    , rate_bottom_left(0.0)
    , rate_door_left(0.0)
    , rate_middle_left(0.0)
    , right_door_status(_alloc)
    , rate_bottom_right(0.0)
    , rate_door_right(0.0)
    , rate_middle_right(0.0)
    , locate(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _left_door_status_type;
  _left_door_status_type left_door_status;

   typedef float _rate_bottom_left_type;
  _rate_bottom_left_type rate_bottom_left;

   typedef float _rate_door_left_type;
  _rate_door_left_type rate_door_left;

   typedef float _rate_middle_left_type;
  _rate_middle_left_type rate_middle_left;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _right_door_status_type;
  _right_door_status_type right_door_status;

   typedef float _rate_bottom_right_type;
  _rate_bottom_right_type rate_bottom_right;

   typedef float _rate_door_right_type;
  _rate_door_right_type rate_door_right;

   typedef float _rate_middle_right_type;
  _rate_middle_right_type rate_middle_right;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _locate_type;
  _locate_type locate;





  typedef boost::shared_ptr< ::campusrover_msgs::DoorResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::DoorResult_<ContainerAllocator> const> ConstPtr;

}; // struct DoorResult_

typedef ::campusrover_msgs::DoorResult_<std::allocator<void> > DoorResult;

typedef boost::shared_ptr< ::campusrover_msgs::DoorResult > DoorResultPtr;
typedef boost::shared_ptr< ::campusrover_msgs::DoorResult const> DoorResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::DoorResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::DoorResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::DoorResult_<ContainerAllocator1> & lhs, const ::campusrover_msgs::DoorResult_<ContainerAllocator2> & rhs)
{
  return lhs.left_door_status == rhs.left_door_status &&
    lhs.rate_bottom_left == rhs.rate_bottom_left &&
    lhs.rate_door_left == rhs.rate_door_left &&
    lhs.rate_middle_left == rhs.rate_middle_left &&
    lhs.right_door_status == rhs.right_door_status &&
    lhs.rate_bottom_right == rhs.rate_bottom_right &&
    lhs.rate_door_right == rhs.rate_door_right &&
    lhs.rate_middle_right == rhs.rate_middle_right &&
    lhs.locate == rhs.locate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::DoorResult_<ContainerAllocator1> & lhs, const ::campusrover_msgs::DoorResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::DoorResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::DoorResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::DoorResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::DoorResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::DoorResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::DoorResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::DoorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c07e76e4878ab6c525aa5c9ac930982";
  }

  static const char* value(const ::campusrover_msgs::DoorResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c07e76e4878ab6cULL;
  static const uint64_t static_value2 = 0x525aa5c9ac930982ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::DoorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/DoorResult";
  }

  static const char* value(const ::campusrover_msgs::DoorResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::DoorResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header left_door_status\n"
"float32 rate_bottom_left\n"
"float32 rate_door_left\n"
"float32 rate_middle_left\n"
"\n"
"std_msgs/Header right_door_status\n"
"float32 rate_bottom_right\n"
"float32 rate_door_right\n"
"float32 rate_middle_right\n"
"\n"
"string locate\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::campusrover_msgs::DoorResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::DoorResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_door_status);
      stream.next(m.rate_bottom_left);
      stream.next(m.rate_door_left);
      stream.next(m.rate_middle_left);
      stream.next(m.right_door_status);
      stream.next(m.rate_bottom_right);
      stream.next(m.rate_door_right);
      stream.next(m.rate_middle_right);
      stream.next(m.locate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DoorResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::DoorResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::DoorResult_<ContainerAllocator>& v)
  {
    s << indent << "left_door_status: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.left_door_status);
    s << indent << "rate_bottom_left: ";
    Printer<float>::stream(s, indent + "  ", v.rate_bottom_left);
    s << indent << "rate_door_left: ";
    Printer<float>::stream(s, indent + "  ", v.rate_door_left);
    s << indent << "rate_middle_left: ";
    Printer<float>::stream(s, indent + "  ", v.rate_middle_left);
    s << indent << "right_door_status: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.right_door_status);
    s << indent << "rate_bottom_right: ";
    Printer<float>::stream(s, indent + "  ", v.rate_bottom_right);
    s << indent << "rate_door_right: ";
    Printer<float>::stream(s, indent + "  ", v.rate_door_right);
    s << indent << "rate_middle_right: ";
    Printer<float>::stream(s, indent + "  ", v.rate_middle_right);
    s << indent << "locate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.locate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_DOORRESULT_H
