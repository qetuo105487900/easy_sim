// Generated by gencpp from file campusrover_msgs/ElevatorControlStatus.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_ELEVATORCONTROLSTATUS_H
#define CAMPUSROVER_MSGS_MESSAGE_ELEVATORCONTROLSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campusrover_msgs
{
template <class ContainerAllocator>
struct ElevatorControlStatus_
{
  typedef ElevatorControlStatus_<ContainerAllocator> Type;

  ElevatorControlStatus_()
    : control_status(0)
    , elevator_id(0)  {
    }
  ElevatorControlStatus_(const ContainerAllocator& _alloc)
    : control_status(0)
    , elevator_id(0)  {
  (void)_alloc;
    }



   typedef uint16_t _control_status_type;
  _control_status_type control_status;

   typedef uint16_t _elevator_id_type;
  _elevator_id_type elevator_id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STANDBY)
  #undef STANDBY
#endif
#if defined(_WIN32) && defined(MOVE_TO_OUTSIDE_BUTTON)
  #undef MOVE_TO_OUTSIDE_BUTTON
#endif
#if defined(_WIN32) && defined(PRESS_OUTSIDE_BUTTON)
  #undef PRESS_OUTSIDE_BUTTON
#endif
#if defined(_WIN32) && defined(MOVE_TO_OUTSIDE_STANDBY_POSITION)
  #undef MOVE_TO_OUTSIDE_STANDBY_POSITION
#endif
#if defined(_WIN32) && defined(WAIT_FOR_OUTSIDE_DOOR_OPEN)
  #undef WAIT_FOR_OUTSIDE_DOOR_OPEN
#endif
#if defined(_WIN32) && defined(ENTER_ELEVATOR_OUTSIDE)
  #undef ENTER_ELEVATOR_OUTSIDE
#endif
#if defined(_WIN32) && defined(ENTER_ELEVATOR_INSIDE_NO_ROTATE)
  #undef ENTER_ELEVATOR_INSIDE_NO_ROTATE
#endif
#if defined(_WIN32) && defined(ENTER_ELEVATOR_INSIDE)
  #undef ENTER_ELEVATOR_INSIDE
#endif
#if defined(_WIN32) && defined(MOVE_TO_INSIDE_BUTTON_NO_ROTATE)
  #undef MOVE_TO_INSIDE_BUTTON_NO_ROTATE
#endif
#if defined(_WIN32) && defined(MOVE_TO_INSIDE_BUTTON)
  #undef MOVE_TO_INSIDE_BUTTON
#endif
#if defined(_WIN32) && defined(PRESS_INSIDE_BUTTON_NO_ROTATE)
  #undef PRESS_INSIDE_BUTTON_NO_ROTATE
#endif
#if defined(_WIN32) && defined(PRESS_INSIDE_BUTTON)
  #undef PRESS_INSIDE_BUTTON
#endif
#if defined(_WIN32) && defined(MOVE_TO_INSIDE_STANDBY_POSITION)
  #undef MOVE_TO_INSIDE_STANDBY_POSITION
#endif
#if defined(_WIN32) && defined(WAIT_FOR_ELEVATOR_ARRIVE)
  #undef WAIT_FOR_ELEVATOR_ARRIVE
#endif
#if defined(_WIN32) && defined(WAIT_FOR_INSIDE_DOOR_OPEN)
  #undef WAIT_FOR_INSIDE_DOOR_OPEN
#endif
#if defined(_WIN32) && defined(LEAVE_ELEVATOR_INSIDE)
  #undef LEAVE_ELEVATOR_INSIDE
#endif
#if defined(_WIN32) && defined(LEAVE_ELEVATOR_OUTSIDE)
  #undef LEAVE_ELEVATOR_OUTSIDE
#endif

  enum {
    STANDBY = 0u,
    MOVE_TO_OUTSIDE_BUTTON = 1u,
    PRESS_OUTSIDE_BUTTON = 2u,
    MOVE_TO_OUTSIDE_STANDBY_POSITION = 3u,
    WAIT_FOR_OUTSIDE_DOOR_OPEN = 4u,
    ENTER_ELEVATOR_OUTSIDE = 5u,
    ENTER_ELEVATOR_INSIDE_NO_ROTATE = 6u,
    ENTER_ELEVATOR_INSIDE = 7u,
    MOVE_TO_INSIDE_BUTTON_NO_ROTATE = 8u,
    MOVE_TO_INSIDE_BUTTON = 9u,
    PRESS_INSIDE_BUTTON_NO_ROTATE = 10u,
    PRESS_INSIDE_BUTTON = 11u,
    MOVE_TO_INSIDE_STANDBY_POSITION = 12u,
    WAIT_FOR_ELEVATOR_ARRIVE = 13u,
    WAIT_FOR_INSIDE_DOOR_OPEN = 14u,
    LEAVE_ELEVATOR_INSIDE = 15u,
    LEAVE_ELEVATOR_OUTSIDE = 16u,
  };


  typedef boost::shared_ptr< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ElevatorControlStatus_

typedef ::campusrover_msgs::ElevatorControlStatus_<std::allocator<void> > ElevatorControlStatus;

typedef boost::shared_ptr< ::campusrover_msgs::ElevatorControlStatus > ElevatorControlStatusPtr;
typedef boost::shared_ptr< ::campusrover_msgs::ElevatorControlStatus const> ElevatorControlStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator1> & lhs, const ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator2> & rhs)
{
  return lhs.control_status == rhs.control_status &&
    lhs.elevator_id == rhs.elevator_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator1> & lhs, const ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91eba8b0d0e3c9306f4419279cc38164";
  }

  static const char* value(const ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91eba8b0d0e3c930ULL;
  static const uint64_t static_value2 = 0x6f4419279cc38164ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/ElevatorControlStatus";
  }

  static const char* value(const ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 control_status\n"
"uint16 STANDBY = 0\n"
"uint16 MOVE_TO_OUTSIDE_BUTTON = 1\n"
"uint16 PRESS_OUTSIDE_BUTTON = 2\n"
"uint16 MOVE_TO_OUTSIDE_STANDBY_POSITION = 3\n"
"uint16 WAIT_FOR_OUTSIDE_DOOR_OPEN = 4\n"
"uint16 ENTER_ELEVATOR_OUTSIDE = 5\n"
"uint16 ENTER_ELEVATOR_INSIDE_NO_ROTATE = 6\n"
"uint16 ENTER_ELEVATOR_INSIDE = 7\n"
"uint16 MOVE_TO_INSIDE_BUTTON_NO_ROTATE = 8\n"
"uint16 MOVE_TO_INSIDE_BUTTON = 9\n"
"uint16 PRESS_INSIDE_BUTTON_NO_ROTATE = 10\n"
"uint16 PRESS_INSIDE_BUTTON = 11\n"
"uint16 MOVE_TO_INSIDE_STANDBY_POSITION = 12\n"
"uint16 WAIT_FOR_ELEVATOR_ARRIVE = 13\n"
"uint16 WAIT_FOR_INSIDE_DOOR_OPEN = 14\n"
"uint16 LEAVE_ELEVATOR_INSIDE = 15\n"
"uint16 LEAVE_ELEVATOR_OUTSIDE = 16\n"
"uint16 elevator_id\n"
;
  }

  static const char* value(const ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_status);
      stream.next(m.elevator_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ElevatorControlStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::ElevatorControlStatus_<ContainerAllocator>& v)
  {
    s << indent << "control_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.control_status);
    s << indent << "elevator_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.elevator_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_ELEVATORCONTROLSTATUS_H
