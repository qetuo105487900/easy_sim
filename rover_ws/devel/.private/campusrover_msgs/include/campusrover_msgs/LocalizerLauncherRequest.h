// Generated by gencpp from file campusrover_msgs/LocalizerLauncherRequest.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_LOCALIZERLAUNCHERREQUEST_H
#define CAMPUSROVER_MSGS_MESSAGE_LOCALIZERLAUNCHERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campusrover_msgs
{
template <class ContainerAllocator>
struct LocalizerLauncherRequest_
{
  typedef LocalizerLauncherRequest_<ContainerAllocator> Type;

  LocalizerLauncherRequest_()
    : localizer(0)
    , map_file()  {
    }
  LocalizerLauncherRequest_(const ContainerAllocator& _alloc)
    : localizer(0)
    , map_file(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _localizer_type;
  _localizer_type localizer;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _map_file_type;
  _map_file_type map_file;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LOCOLIZAR_2D_VLP16_ODOM)
  #undef LOCOLIZAR_2D_VLP16_ODOM
#endif
#if defined(_WIN32) && defined(LOCOLIZAR_2D_HOKUYO_ODOM)
  #undef LOCOLIZAR_2D_HOKUYO_ODOM
#endif
#if defined(_WIN32) && defined(LOCOLIZAR_2D_YD_ODOM)
  #undef LOCOLIZAR_2D_YD_ODOM
#endif
#if defined(_WIN32) && defined(LOCOLIZAR_2D_YD_SCAN_MATCHING)
  #undef LOCOLIZAR_2D_YD_SCAN_MATCHING
#endif
#if defined(_WIN32) && defined(LOCOLIZAR_3D_VLP16_ODOM)
  #undef LOCOLIZAR_3D_VLP16_ODOM
#endif

  enum {
    LOCOLIZAR_2D_VLP16_ODOM = 0u,
    LOCOLIZAR_2D_HOKUYO_ODOM = 1u,
    LOCOLIZAR_2D_YD_ODOM = 2u,
    LOCOLIZAR_2D_YD_SCAN_MATCHING = 3u,
    LOCOLIZAR_3D_VLP16_ODOM = 4u,
  };


  typedef boost::shared_ptr< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LocalizerLauncherRequest_

typedef ::campusrover_msgs::LocalizerLauncherRequest_<std::allocator<void> > LocalizerLauncherRequest;

typedef boost::shared_ptr< ::campusrover_msgs::LocalizerLauncherRequest > LocalizerLauncherRequestPtr;
typedef boost::shared_ptr< ::campusrover_msgs::LocalizerLauncherRequest const> LocalizerLauncherRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator2> & rhs)
{
  return lhs.localizer == rhs.localizer &&
    lhs.map_file == rhs.map_file;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31dad307792f3557c6fb217cceb9116f";
  }

  static const char* value(const ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31dad307792f3557ULL;
  static const uint64_t static_value2 = 0xc6fb217cceb9116fULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/LocalizerLauncherRequest";
  }

  static const char* value(const ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 LOCOLIZAR_2D_VLP16_ODOM=0\n"
"uint8 LOCOLIZAR_2D_HOKUYO_ODOM=1\n"
"uint8 LOCOLIZAR_2D_YD_ODOM=2\n"
"uint8 LOCOLIZAR_2D_YD_SCAN_MATCHING=3\n"
"uint8 LOCOLIZAR_3D_VLP16_ODOM=4\n"
"\n"
"uint8 localizer\n"
"string map_file\n"
;
  }

  static const char* value(const ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.localizer);
      stream.next(m.map_file);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalizerLauncherRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::LocalizerLauncherRequest_<ContainerAllocator>& v)
  {
    s << indent << "localizer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.localizer);
    s << indent << "map_file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.map_file);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_LOCALIZERLAUNCHERREQUEST_H
