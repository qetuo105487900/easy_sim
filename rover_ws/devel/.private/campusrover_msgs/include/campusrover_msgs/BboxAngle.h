// Generated by gencpp from file campusrover_msgs/BboxAngle.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_BBOXANGLE_H
#define CAMPUSROVER_MSGS_MESSAGE_BBOXANGLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campusrover_msgs
{
template <class ContainerAllocator>
struct BboxAngle_
{
  typedef BboxAngle_<ContainerAllocator> Type;

  BboxAngle_()
    : label(0)
    , angle(0.0)  {
    }
  BboxAngle_(const ContainerAllocator& _alloc)
    : label(0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _label_type;
  _label_type label;

   typedef double _angle_type;
  _angle_type angle;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LABEL_PERSON)
  #undef LABEL_PERSON
#endif
#if defined(_WIN32) && defined(LABEL_BICYCLE)
  #undef LABEL_BICYCLE
#endif
#if defined(_WIN32) && defined(LABEL_CAR)
  #undef LABEL_CAR
#endif
#if defined(_WIN32) && defined(LABEL_MOTORCYCLE)
  #undef LABEL_MOTORCYCLE
#endif

  enum {
    LABEL_PERSON = 1u,
    LABEL_BICYCLE = 2u,
    LABEL_CAR = 3u,
    LABEL_MOTORCYCLE = 4u,
  };


  typedef boost::shared_ptr< ::campusrover_msgs::BboxAngle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::BboxAngle_<ContainerAllocator> const> ConstPtr;

}; // struct BboxAngle_

typedef ::campusrover_msgs::BboxAngle_<std::allocator<void> > BboxAngle;

typedef boost::shared_ptr< ::campusrover_msgs::BboxAngle > BboxAnglePtr;
typedef boost::shared_ptr< ::campusrover_msgs::BboxAngle const> BboxAngleConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::BboxAngle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::BboxAngle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::BboxAngle_<ContainerAllocator1> & lhs, const ::campusrover_msgs::BboxAngle_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::BboxAngle_<ContainerAllocator1> & lhs, const ::campusrover_msgs::BboxAngle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::BboxAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::BboxAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::BboxAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::BboxAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::BboxAngle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::BboxAngle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::BboxAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2aa10b01275d72e1527a3a634bcf02a2";
  }

  static const char* value(const ::campusrover_msgs::BboxAngle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2aa10b01275d72e1ULL;
  static const uint64_t static_value2 = 0x527a3a634bcf02a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::BboxAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/BboxAngle";
  }

  static const char* value(const ::campusrover_msgs::BboxAngle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::BboxAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 LABEL_PERSON = 1\n"
"uint16 LABEL_BICYCLE = 2\n"
"uint16 LABEL_CAR = 3\n"
"uint16 LABEL_MOTORCYCLE = 4\n"
"\n"
"uint16 label\n"
"float64 angle\n"
;
  }

  static const char* value(const ::campusrover_msgs::BboxAngle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::BboxAngle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BboxAngle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::BboxAngle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::BboxAngle_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.label);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_BBOXANGLE_H
