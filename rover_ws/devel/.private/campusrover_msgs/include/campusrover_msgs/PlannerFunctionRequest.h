// Generated by gencpp from file campusrover_msgs/PlannerFunctionRequest.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_PLANNERFUNCTIONREQUEST_H
#define CAMPUSROVER_MSGS_MESSAGE_PLANNERFUNCTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <geometry_msgs/Twist.h>

namespace campusrover_msgs
{
template <class ContainerAllocator>
struct PlannerFunctionRequest_
{
  typedef PlannerFunctionRequest_<ContainerAllocator> Type;

  PlannerFunctionRequest_()
    : action()
    , direction_inverse()
    , obstacle_avoidance()
    , mode(0)
    , speed_parameter()  {
    }
  PlannerFunctionRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , direction_inverse(_alloc)
    , obstacle_avoidance(_alloc)
    , mode(0)
    , speed_parameter(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Bool_<ContainerAllocator>  _action_type;
  _action_type action;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _direction_inverse_type;
  _direction_inverse_type direction_inverse;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _obstacle_avoidance_type;
  _obstacle_avoidance_type obstacle_avoidance;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _speed_parameter_type;
  _speed_parameter_type speed_parameter;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_GLOBAL_PATH)
  #undef MODE_GLOBAL_PATH
#endif
#if defined(_WIN32) && defined(MODE_ELEVATOR_PATH)
  #undef MODE_ELEVATOR_PATH
#endif
#if defined(_WIN32) && defined(MODE_BUTTON_PARKING)
  #undef MODE_BUTTON_PARKING
#endif
#if defined(_WIN32) && defined(MODE_PULLOVER_PATH)
  #undef MODE_PULLOVER_PATH
#endif

  enum {
    MODE_GLOBAL_PATH = 1u,
    MODE_ELEVATOR_PATH = 2u,
    MODE_BUTTON_PARKING = 3u,
    MODE_PULLOVER_PATH = 4u,
  };


  typedef boost::shared_ptr< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlannerFunctionRequest_

typedef ::campusrover_msgs::PlannerFunctionRequest_<std::allocator<void> > PlannerFunctionRequest;

typedef boost::shared_ptr< ::campusrover_msgs::PlannerFunctionRequest > PlannerFunctionRequestPtr;
typedef boost::shared_ptr< ::campusrover_msgs::PlannerFunctionRequest const> PlannerFunctionRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.direction_inverse == rhs.direction_inverse &&
    lhs.obstacle_avoidance == rhs.obstacle_avoidance &&
    lhs.mode == rhs.mode &&
    lhs.speed_parameter == rhs.speed_parameter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c60ec02ce4d0a2a87272560a3a28c93a";
  }

  static const char* value(const ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc60ec02ce4d0a2a8ULL;
  static const uint64_t static_value2 = 0x7272560a3a28c93aULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/PlannerFunctionRequest";
  }

  static const char* value(const ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 MODE_GLOBAL_PATH = 1\n"
"uint8 MODE_ELEVATOR_PATH = 2\n"
"uint8 MODE_BUTTON_PARKING = 3\n"
"uint8 MODE_PULLOVER_PATH = 4\n"
"std_msgs/Bool action\n"
"std_msgs/Bool direction_inverse\n"
"std_msgs/Bool obstacle_avoidance\n"
"uint8 mode\n"
"geometry_msgs/Twist speed_parameter\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.direction_inverse);
      stream.next(m.obstacle_avoidance);
      stream.next(m.mode);
      stream.next(m.speed_parameter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlannerFunctionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::PlannerFunctionRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.action);
    s << indent << "direction_inverse: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.direction_inverse);
    s << indent << "obstacle_avoidance: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle_avoidance);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "speed_parameter: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.speed_parameter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_PLANNERFUNCTIONREQUEST_H
