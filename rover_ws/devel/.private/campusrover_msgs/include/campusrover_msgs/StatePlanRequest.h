// Generated by gencpp from file campusrover_msgs/StatePlanRequest.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_STATEPLANREQUEST_H
#define CAMPUSROVER_MSGS_MESSAGE_STATEPLANREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campusrover_msgs
{
template <class ContainerAllocator>
struct StatePlanRequest_
{
  typedef StatePlanRequest_<ContainerAllocator> Type;

  StatePlanRequest_()
    : rooms()  {
    }
  StatePlanRequest_(const ContainerAllocator& _alloc)
    : rooms(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _rooms_type;
  _rooms_type rooms;





  typedef boost::shared_ptr< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StatePlanRequest_

typedef ::campusrover_msgs::StatePlanRequest_<std::allocator<void> > StatePlanRequest;

typedef boost::shared_ptr< ::campusrover_msgs::StatePlanRequest > StatePlanRequestPtr;
typedef boost::shared_ptr< ::campusrover_msgs::StatePlanRequest const> StatePlanRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::StatePlanRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::StatePlanRequest_<ContainerAllocator2> & rhs)
{
  return lhs.rooms == rhs.rooms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::StatePlanRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::StatePlanRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13825514ad9d69d104154c9204a5a293";
  }

  static const char* value(const ::campusrover_msgs::StatePlanRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13825514ad9d69d1ULL;
  static const uint64_t static_value2 = 0x04154c9204a5a293ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/StatePlanRequest";
  }

  static const char* value(const ::campusrover_msgs::StatePlanRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] rooms\n"
;
  }

  static const char* value(const ::campusrover_msgs::StatePlanRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rooms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StatePlanRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::StatePlanRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::StatePlanRequest_<ContainerAllocator>& v)
  {
    s << indent << "rooms[]" << std::endl;
    for (size_t i = 0; i < v.rooms.size(); ++i)
    {
      s << indent << "  rooms[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.rooms[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_STATEPLANREQUEST_H
