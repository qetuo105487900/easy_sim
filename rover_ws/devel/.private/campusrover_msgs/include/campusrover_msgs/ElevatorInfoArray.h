// Generated by gencpp from file campusrover_msgs/ElevatorInfoArray.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_ELEVATORINFOARRAY_H
#define CAMPUSROVER_MSGS_MESSAGE_ELEVATORINFOARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <campusrover_msgs/ElevatorInfo.h>

namespace campusrover_msgs
{
template <class ContainerAllocator>
struct ElevatorInfoArray_
{
  typedef ElevatorInfoArray_<ContainerAllocator> Type;

  ElevatorInfoArray_()
    : elevator_infos()  {
    }
  ElevatorInfoArray_(const ContainerAllocator& _alloc)
    : elevator_infos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::campusrover_msgs::ElevatorInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::campusrover_msgs::ElevatorInfo_<ContainerAllocator> >> _elevator_infos_type;
  _elevator_infos_type elevator_infos;





  typedef boost::shared_ptr< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> const> ConstPtr;

}; // struct ElevatorInfoArray_

typedef ::campusrover_msgs::ElevatorInfoArray_<std::allocator<void> > ElevatorInfoArray;

typedef boost::shared_ptr< ::campusrover_msgs::ElevatorInfoArray > ElevatorInfoArrayPtr;
typedef boost::shared_ptr< ::campusrover_msgs::ElevatorInfoArray const> ElevatorInfoArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator1> & lhs, const ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator2> & rhs)
{
  return lhs.elevator_infos == rhs.elevator_infos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator1> & lhs, const ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e9215978b0b25ebc2893037e3da3bf9";
  }

  static const char* value(const ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e9215978b0b25ebULL;
  static const uint64_t static_value2 = 0xc2893037e3da3bf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/ElevatorInfoArray";
  }

  static const char* value(const ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/ElevatorInfo[] elevator_infos\n"
"================================================================================\n"
"MSG: campusrover_msgs/ElevatorInfo\n"
"string building\n"
"int64 id\n"
"geometry_msgs/Point elevator_size \n"
"geometry_msgs/Point elevator_door_size \n"
"geometry_msgs/Pose outside_button_position \n"
"geometry_msgs/Pose inside_button_position \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.elevator_infos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ElevatorInfoArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::ElevatorInfoArray_<ContainerAllocator>& v)
  {
    s << indent << "elevator_infos[]" << std::endl;
    for (size_t i = 0; i < v.elevator_infos.size(); ++i)
    {
      s << indent << "  elevator_infos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::campusrover_msgs::ElevatorInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.elevator_infos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_ELEVATORINFOARRAY_H
