// Generated by gencpp from file campusrover_msgs/PressButtonRequest.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_PRESSBUTTONREQUEST_H
#define CAMPUSROVER_MSGS_MESSAGE_PRESSBUTTONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace campusrover_msgs
{
template <class ContainerAllocator>
struct PressButtonRequest_
{
  typedef PressButtonRequest_<ContainerAllocator> Type;

  PressButtonRequest_()
    : button_type()  {
    }
  PressButtonRequest_(const ContainerAllocator& _alloc)
    : button_type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _button_type_type;
  _button_type_type button_type;





  typedef boost::shared_ptr< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PressButtonRequest_

typedef ::campusrover_msgs::PressButtonRequest_<std::allocator<void> > PressButtonRequest;

typedef boost::shared_ptr< ::campusrover_msgs::PressButtonRequest > PressButtonRequestPtr;
typedef boost::shared_ptr< ::campusrover_msgs::PressButtonRequest const> PressButtonRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::PressButtonRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::PressButtonRequest_<ContainerAllocator2> & rhs)
{
  return lhs.button_type == rhs.button_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::PressButtonRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::PressButtonRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2108c1711893849d03c12dc680c3be5";
  }

  static const char* value(const ::campusrover_msgs::PressButtonRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2108c1711893849ULL;
  static const uint64_t static_value2 = 0xd03c12dc680c3be5ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/PressButtonRequest";
  }

  static const char* value(const ::campusrover_msgs::PressButtonRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String button_type\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::campusrover_msgs::PressButtonRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.button_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PressButtonRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::PressButtonRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::PressButtonRequest_<ContainerAllocator>& v)
  {
    s << indent << "button_type: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.button_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_PRESSBUTTONREQUEST_H
