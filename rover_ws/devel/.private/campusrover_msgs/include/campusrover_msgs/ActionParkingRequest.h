// Generated by gencpp from file campusrover_msgs/ActionParkingRequest.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_ACTIONPARKINGREQUEST_H
#define CAMPUSROVER_MSGS_MESSAGE_ACTIONPARKINGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campusrover_msgs
{
template <class ContainerAllocator>
struct ActionParkingRequest_
{
  typedef ActionParkingRequest_<ContainerAllocator> Type;

  ActionParkingRequest_()
    : control_mode(0)
    , max_linear_vel(0.0)
    , max_angular_vel(0.0)  {
    }
  ActionParkingRequest_(const ContainerAllocator& _alloc)
    : control_mode(0)
    , max_linear_vel(0.0)
    , max_angular_vel(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef float _max_linear_vel_type;
  _max_linear_vel_type max_linear_vel;

   typedef float _max_angular_vel_type;
  _max_angular_vel_type max_angular_vel;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CONTROL_MODE_DEFAULT)
  #undef CONTROL_MODE_DEFAULT
#endif
#if defined(_WIN32) && defined(CONTROL_MODE_PID)
  #undef CONTROL_MODE_PID
#endif
#if defined(_WIN32) && defined(CONTROL_MODE_REVERSE)
  #undef CONTROL_MODE_REVERSE
#endif

  enum {
    CONTROL_MODE_DEFAULT = 0u,
    CONTROL_MODE_PID = 1u,
    CONTROL_MODE_REVERSE = 2u,
  };


  typedef boost::shared_ptr< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ActionParkingRequest_

typedef ::campusrover_msgs::ActionParkingRequest_<std::allocator<void> > ActionParkingRequest;

typedef boost::shared_ptr< ::campusrover_msgs::ActionParkingRequest > ActionParkingRequestPtr;
typedef boost::shared_ptr< ::campusrover_msgs::ActionParkingRequest const> ActionParkingRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator2> & rhs)
{
  return lhs.control_mode == rhs.control_mode &&
    lhs.max_linear_vel == rhs.max_linear_vel &&
    lhs.max_angular_vel == rhs.max_angular_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a58cbdc0eba1671ad4368e60a958b8d7";
  }

  static const char* value(const ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa58cbdc0eba1671aULL;
  static const uint64_t static_value2 = 0xd4368e60a958b8d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/ActionParkingRequest";
  }

  static const char* value(const ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 CONTROL_MODE_DEFAULT=0\n"
"uint8 CONTROL_MODE_PID=1\n"
"uint8 CONTROL_MODE_REVERSE=2\n"
"uint8 control_mode\n"
"float32 max_linear_vel\n"
"float32 max_angular_vel\n"
;
  }

  static const char* value(const ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_mode);
      stream.next(m.max_linear_vel);
      stream.next(m.max_angular_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionParkingRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::ActionParkingRequest_<ContainerAllocator>& v)
  {
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "max_linear_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_linear_vel);
    s << indent << "max_angular_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_angular_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_ACTIONPARKINGREQUEST_H
