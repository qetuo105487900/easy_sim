// Generated by gencpp from file campusrover_msgs/DriveProfileRequest.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_DRIVEPROFILEREQUEST_H
#define CAMPUSROVER_MSGS_MESSAGE_DRIVEPROFILEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campusrover_msgs
{
template <class ContainerAllocator>
struct DriveProfileRequest_
{
  typedef DriveProfileRequest_<ContainerAllocator> Type;

  DriveProfileRequest_()
    : drive_profile(0)
    , acc_max(0.0)
    , acc_step(0.0)
    , dec_max(0.0)
    , dec_step(0.0)
    , vel_tolerance(0.0)
    , profile_omega_max(0.0)
    , profile_omega_step(0.0)
    , omega_tolerance(0.0)
    , max_speed(0.0)  {
    }
  DriveProfileRequest_(const ContainerAllocator& _alloc)
    : drive_profile(0)
    , acc_max(0.0)
    , acc_step(0.0)
    , dec_max(0.0)
    , dec_step(0.0)
    , vel_tolerance(0.0)
    , profile_omega_max(0.0)
    , profile_omega_step(0.0)
    , omega_tolerance(0.0)
    , max_speed(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _drive_profile_type;
  _drive_profile_type drive_profile;

   typedef double _acc_max_type;
  _acc_max_type acc_max;

   typedef double _acc_step_type;
  _acc_step_type acc_step;

   typedef double _dec_max_type;
  _dec_max_type dec_max;

   typedef double _dec_step_type;
  _dec_step_type dec_step;

   typedef double _vel_tolerance_type;
  _vel_tolerance_type vel_tolerance;

   typedef double _profile_omega_max_type;
  _profile_omega_max_type profile_omega_max;

   typedef double _profile_omega_step_type;
  _profile_omega_step_type profile_omega_step;

   typedef double _omega_tolerance_type;
  _omega_tolerance_type omega_tolerance;

   typedef double _max_speed_type;
  _max_speed_type max_speed;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DRIVE_PROFILE_NOUSE)
  #undef DRIVE_PROFILE_NOUSE
#endif
#if defined(_WIN32) && defined(DRIVE_PROFILE_DEFAULT)
  #undef DRIVE_PROFILE_DEFAULT
#endif
#if defined(_WIN32) && defined(DRIVE_PROFILE_SET)
  #undef DRIVE_PROFILE_SET
#endif

  enum {
    DRIVE_PROFILE_NOUSE = 0u,
    DRIVE_PROFILE_DEFAULT = 1u,
    DRIVE_PROFILE_SET = 2u,
  };


  typedef boost::shared_ptr< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DriveProfileRequest_

typedef ::campusrover_msgs::DriveProfileRequest_<std::allocator<void> > DriveProfileRequest;

typedef boost::shared_ptr< ::campusrover_msgs::DriveProfileRequest > DriveProfileRequestPtr;
typedef boost::shared_ptr< ::campusrover_msgs::DriveProfileRequest const> DriveProfileRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator2> & rhs)
{
  return lhs.drive_profile == rhs.drive_profile &&
    lhs.acc_max == rhs.acc_max &&
    lhs.acc_step == rhs.acc_step &&
    lhs.dec_max == rhs.dec_max &&
    lhs.dec_step == rhs.dec_step &&
    lhs.vel_tolerance == rhs.vel_tolerance &&
    lhs.profile_omega_max == rhs.profile_omega_max &&
    lhs.profile_omega_step == rhs.profile_omega_step &&
    lhs.omega_tolerance == rhs.omega_tolerance &&
    lhs.max_speed == rhs.max_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator1> & lhs, const ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5377416382979c45089c79712b283109";
  }

  static const char* value(const ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5377416382979c45ULL;
  static const uint64_t static_value2 = 0x089c79712b283109ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/DriveProfileRequest";
  }

  static const char* value(const ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 DRIVE_PROFILE_NOUSE = 0\n"
"uint8 DRIVE_PROFILE_DEFAULT = 1\n"
"uint8 DRIVE_PROFILE_SET = 2\n"
"uint8 drive_profile\n"
"\n"
"float64 acc_max \n"
"float64 acc_step\n"
"float64 dec_max\n"
"float64 dec_step\n"
"float64 vel_tolerance\n"
"float64 profile_omega_max\n"
"float64 profile_omega_step\n"
"float64 omega_tolerance\n"
"float64 max_speed\n"
"\n"
;
  }

  static const char* value(const ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drive_profile);
      stream.next(m.acc_max);
      stream.next(m.acc_step);
      stream.next(m.dec_max);
      stream.next(m.dec_step);
      stream.next(m.vel_tolerance);
      stream.next(m.profile_omega_max);
      stream.next(m.profile_omega_step);
      stream.next(m.omega_tolerance);
      stream.next(m.max_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriveProfileRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::DriveProfileRequest_<ContainerAllocator>& v)
  {
    s << indent << "drive_profile: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drive_profile);
    s << indent << "acc_max: ";
    Printer<double>::stream(s, indent + "  ", v.acc_max);
    s << indent << "acc_step: ";
    Printer<double>::stream(s, indent + "  ", v.acc_step);
    s << indent << "dec_max: ";
    Printer<double>::stream(s, indent + "  ", v.dec_max);
    s << indent << "dec_step: ";
    Printer<double>::stream(s, indent + "  ", v.dec_step);
    s << indent << "vel_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.vel_tolerance);
    s << indent << "profile_omega_max: ";
    Printer<double>::stream(s, indent + "  ", v.profile_omega_max);
    s << indent << "profile_omega_step: ";
    Printer<double>::stream(s, indent + "  ", v.profile_omega_step);
    s << indent << "omega_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.omega_tolerance);
    s << indent << "max_speed: ";
    Printer<double>::stream(s, indent + "  ", v.max_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_DRIVEPROFILEREQUEST_H
