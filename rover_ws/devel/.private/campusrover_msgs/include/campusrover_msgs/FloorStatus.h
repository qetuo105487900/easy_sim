// Generated by gencpp from file campusrover_msgs/FloorStatus.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_FLOORSTATUS_H
#define CAMPUSROVER_MSGS_MESSAGE_FLOORSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campusrover_msgs
{
template <class ContainerAllocator>
struct FloorStatus_
{
  typedef FloorStatus_<ContainerAllocator> Type;

  FloorStatus_()
    : init_pressure(0)
    , init_floor(0)
    , current_pressure(0)
    , current_floor(0)  {
    }
  FloorStatus_(const ContainerAllocator& _alloc)
    : init_pressure(0)
    , init_floor(0)
    , current_pressure(0)
    , current_floor(0)  {
  (void)_alloc;
    }



   typedef int32_t _init_pressure_type;
  _init_pressure_type init_pressure;

   typedef int32_t _init_floor_type;
  _init_floor_type init_floor;

   typedef int32_t _current_pressure_type;
  _current_pressure_type current_pressure;

   typedef int32_t _current_floor_type;
  _current_floor_type current_floor;





  typedef boost::shared_ptr< ::campusrover_msgs::FloorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::FloorStatus_<ContainerAllocator> const> ConstPtr;

}; // struct FloorStatus_

typedef ::campusrover_msgs::FloorStatus_<std::allocator<void> > FloorStatus;

typedef boost::shared_ptr< ::campusrover_msgs::FloorStatus > FloorStatusPtr;
typedef boost::shared_ptr< ::campusrover_msgs::FloorStatus const> FloorStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::FloorStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::FloorStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::FloorStatus_<ContainerAllocator1> & lhs, const ::campusrover_msgs::FloorStatus_<ContainerAllocator2> & rhs)
{
  return lhs.init_pressure == rhs.init_pressure &&
    lhs.init_floor == rhs.init_floor &&
    lhs.current_pressure == rhs.current_pressure &&
    lhs.current_floor == rhs.current_floor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::FloorStatus_<ContainerAllocator1> & lhs, const ::campusrover_msgs::FloorStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::FloorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::FloorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::FloorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::FloorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::FloorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::FloorStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::FloorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50c989e719e41082ae566a766279d8c4";
  }

  static const char* value(const ::campusrover_msgs::FloorStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50c989e719e41082ULL;
  static const uint64_t static_value2 = 0xae566a766279d8c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::FloorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/FloorStatus";
  }

  static const char* value(const ::campusrover_msgs::FloorStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::FloorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 init_pressure\n"
"int32 init_floor\n"
"int32 current_pressure\n"
"int32 current_floor\n"
;
  }

  static const char* value(const ::campusrover_msgs::FloorStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::FloorStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.init_pressure);
      stream.next(m.init_floor);
      stream.next(m.current_pressure);
      stream.next(m.current_floor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FloorStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::FloorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::FloorStatus_<ContainerAllocator>& v)
  {
    s << indent << "init_pressure: ";
    Printer<int32_t>::stream(s, indent + "  ", v.init_pressure);
    s << indent << "init_floor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.init_floor);
    s << indent << "current_pressure: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_pressure);
    s << indent << "current_floor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_floor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_FLOORSTATUS_H
