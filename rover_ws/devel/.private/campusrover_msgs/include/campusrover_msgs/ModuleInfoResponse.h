// Generated by gencpp from file campusrover_msgs/ModuleInfoResponse.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_MODULEINFORESPONSE_H
#define CAMPUSROVER_MSGS_MESSAGE_MODULEINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <campusrover_msgs/NodeInfo.h>
#include <campusrover_msgs/RoomConnected.h>

namespace campusrover_msgs
{
template <class ContainerAllocator>
struct ModuleInfoResponse_
{
  typedef ModuleInfoResponse_<ContainerAllocator> Type;

  ModuleInfoResponse_()
    : frame_id()
    , node()
    , connections()  {
    }
  ModuleInfoResponse_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , node(_alloc)
    , connections(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef std::vector< ::campusrover_msgs::NodeInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::campusrover_msgs::NodeInfo_<ContainerAllocator> >> _node_type;
  _node_type node;

   typedef std::vector< ::campusrover_msgs::RoomConnected_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::campusrover_msgs::RoomConnected_<ContainerAllocator> >> _connections_type;
  _connections_type connections;





  typedef boost::shared_ptr< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ModuleInfoResponse_

typedef ::campusrover_msgs::ModuleInfoResponse_<std::allocator<void> > ModuleInfoResponse;

typedef boost::shared_ptr< ::campusrover_msgs::ModuleInfoResponse > ModuleInfoResponsePtr;
typedef boost::shared_ptr< ::campusrover_msgs::ModuleInfoResponse const> ModuleInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator1> & lhs, const ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.node == rhs.node &&
    lhs.connections == rhs.connections;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator1> & lhs, const ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d00258d8534156fdecf5fefabc0695e7";
  }

  static const char* value(const ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd00258d8534156fdULL;
  static const uint64_t static_value2 = 0xecf5fefabc0695e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/ModuleInfoResponse";
  }

  static const char* value(const ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string frame_id\n"
"campusrover_msgs/NodeInfo[] node\n"
"campusrover_msgs/RoomConnected[] connections\n"
"\n"
"================================================================================\n"
"MSG: campusrover_msgs/NodeInfo\n"
"string name\n"
"geometry_msgs/Pose pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: campusrover_msgs/RoomConnected\n"
"string[] connection\n"
;
  }

  static const char* value(const ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.node);
      stream.next(m.connections);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModuleInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::ModuleInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "node[]" << std::endl;
    for (size_t i = 0; i < v.node.size(); ++i)
    {
      s << indent << "  node[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::campusrover_msgs::NodeInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.node[i]);
    }
    s << indent << "connections[]" << std::endl;
    for (size_t i = 0; i < v.connections.size(); ++i)
    {
      s << indent << "  connections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::campusrover_msgs::RoomConnected_<ContainerAllocator> >::stream(s, indent + "    ", v.connections[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_MODULEINFORESPONSE_H
