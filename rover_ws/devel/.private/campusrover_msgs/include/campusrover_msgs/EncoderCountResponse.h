// Generated by gencpp from file campusrover_msgs/EncoderCountResponse.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_ENCODERCOUNTRESPONSE_H
#define CAMPUSROVER_MSGS_MESSAGE_ENCODERCOUNTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campusrover_msgs
{
template <class ContainerAllocator>
struct EncoderCountResponse_
{
  typedef EncoderCountResponse_<ContainerAllocator> Type;

  EncoderCountResponse_()
    : left_count(0)
    , right_count(0)  {
    }
  EncoderCountResponse_(const ContainerAllocator& _alloc)
    : left_count(0)
    , right_count(0)  {
  (void)_alloc;
    }



   typedef int64_t _left_count_type;
  _left_count_type left_count;

   typedef int64_t _right_count_type;
  _right_count_type right_count;





  typedef boost::shared_ptr< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EncoderCountResponse_

typedef ::campusrover_msgs::EncoderCountResponse_<std::allocator<void> > EncoderCountResponse;

typedef boost::shared_ptr< ::campusrover_msgs::EncoderCountResponse > EncoderCountResponsePtr;
typedef boost::shared_ptr< ::campusrover_msgs::EncoderCountResponse const> EncoderCountResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator1> & lhs, const ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator2> & rhs)
{
  return lhs.left_count == rhs.left_count &&
    lhs.right_count == rhs.right_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator1> & lhs, const ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "310f2c2a4adfa0f8fc31fa2482448b81";
  }

  static const char* value(const ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x310f2c2a4adfa0f8ULL;
  static const uint64_t static_value2 = 0xfc31fa2482448b81ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/EncoderCountResponse";
  }

  static const char* value(const ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 left_count\n"
"int64 right_count\n"
;
  }

  static const char* value(const ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_count);
      stream.next(m.right_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EncoderCountResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campusrover_msgs::EncoderCountResponse_<ContainerAllocator>& v)
  {
    s << indent << "left_count: ";
    Printer<int64_t>::stream(s, indent + "  ", v.left_count);
    s << indent << "right_count: ";
    Printer<int64_t>::stream(s, indent + "  ", v.right_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_ENCODERCOUNTRESPONSE_H
