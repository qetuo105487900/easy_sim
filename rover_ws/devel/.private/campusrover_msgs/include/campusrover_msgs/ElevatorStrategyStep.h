// Generated by gencpp from file campusrover_msgs/ElevatorStrategyStep.msg
// DO NOT EDIT!


#ifndef CAMPUSROVER_MSGS_MESSAGE_ELEVATORSTRATEGYSTEP_H
#define CAMPUSROVER_MSGS_MESSAGE_ELEVATORSTRATEGYSTEP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campusrover_msgs
{
template <class ContainerAllocator>
struct ElevatorStrategyStep_
{
  typedef ElevatorStrategyStep_<ContainerAllocator> Type;

  ElevatorStrategyStep_()
    {
    }
  ElevatorStrategyStep_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STANDBY)
  #undef STANDBY
#endif
#if defined(_WIN32) && defined(MOVE_TO_CHECK_OUTSIDE_BUTTON)
  #undef MOVE_TO_CHECK_OUTSIDE_BUTTON
#endif
#if defined(_WIN32) && defined(PRESS_OUTSIDE_BUTTON)
  #undef PRESS_OUTSIDE_BUTTON
#endif
#if defined(_WIN32) && defined(MOVE_TO_OUTSIDE_STANDBY_POSITION)
  #undef MOVE_TO_OUTSIDE_STANDBY_POSITION
#endif
#if defined(_WIN32) && defined(WAIT_FOR_OUTSIDE_DOOR_OPEN)
  #undef WAIT_FOR_OUTSIDE_DOOR_OPEN
#endif
#if defined(_WIN32) && defined(MOVE_TO_ELEVATOR_CENTER)
  #undef MOVE_TO_ELEVATOR_CENTER
#endif
#if defined(_WIN32) && defined(MOVE_TO_CHECK_ELEVATOR_BUTTON)
  #undef MOVE_TO_CHECK_ELEVATOR_BUTTON
#endif
#if defined(_WIN32) && defined(PRESS_ELEVATOR_BUTTON)
  #undef PRESS_ELEVATOR_BUTTON
#endif
#if defined(_WIN32) && defined(MOVE_TO_ELEVATOR_STANDBY_POSITION)
  #undef MOVE_TO_ELEVATOR_STANDBY_POSITION
#endif
#if defined(_WIN32) && defined(WAIT_FOR_ELEVATOR_ARRIVE_AND_DOOR_OPEN)
  #undef WAIT_FOR_ELEVATOR_ARRIVE_AND_DOOR_OPEN
#endif
#if defined(_WIN32) && defined(LEAVE_ELEVATOR)
  #undef LEAVE_ELEVATOR
#endif
#if defined(_WIN32) && defined(COMPLETE_ELEVATOR_STRATEGY)
  #undef COMPLETE_ELEVATOR_STRATEGY
#endif

  enum {
    STANDBY = 0u,
    MOVE_TO_CHECK_OUTSIDE_BUTTON = 1u,
    PRESS_OUTSIDE_BUTTON = 2u,
    MOVE_TO_OUTSIDE_STANDBY_POSITION = 3u,
    WAIT_FOR_OUTSIDE_DOOR_OPEN = 4u,
    MOVE_TO_ELEVATOR_CENTER = 5u,
    MOVE_TO_CHECK_ELEVATOR_BUTTON = 6u,
    PRESS_ELEVATOR_BUTTON = 7u,
    MOVE_TO_ELEVATOR_STANDBY_POSITION = 8u,
    WAIT_FOR_ELEVATOR_ARRIVE_AND_DOOR_OPEN = 9u,
    LEAVE_ELEVATOR = 10u,
    COMPLETE_ELEVATOR_STRATEGY = 11u,
  };


  typedef boost::shared_ptr< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> const> ConstPtr;

}; // struct ElevatorStrategyStep_

typedef ::campusrover_msgs::ElevatorStrategyStep_<std::allocator<void> > ElevatorStrategyStep;

typedef boost::shared_ptr< ::campusrover_msgs::ElevatorStrategyStep > ElevatorStrategyStepPtr;
typedef boost::shared_ptr< ::campusrover_msgs::ElevatorStrategyStep const> ElevatorStrategyStepConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace campusrover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab7d8f1b7ce78283504b9bd3659c36b7";
  }

  static const char* value(const ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab7d8f1b7ce78283ULL;
  static const uint64_t static_value2 = 0x504b9bd3659c36b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campusrover_msgs/ElevatorStrategyStep";
  }

  static const char* value(const ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 STANDBY = 0\n"
"uint16 MOVE_TO_CHECK_OUTSIDE_BUTTON = 1\n"
"uint16 PRESS_OUTSIDE_BUTTON = 2\n"
"uint16 MOVE_TO_OUTSIDE_STANDBY_POSITION = 3\n"
"uint16 WAIT_FOR_OUTSIDE_DOOR_OPEN = 4\n"
"uint16 MOVE_TO_ELEVATOR_CENTER = 5\n"
"uint16 MOVE_TO_CHECK_ELEVATOR_BUTTON = 6\n"
"uint16 PRESS_ELEVATOR_BUTTON = 7\n"
"uint16 MOVE_TO_ELEVATOR_STANDBY_POSITION = 8\n"
"uint16 WAIT_FOR_ELEVATOR_ARRIVE_AND_DOOR_OPEN = 9\n"
"uint16 LEAVE_ELEVATOR = 10\n"
"uint16 COMPLETE_ELEVATOR_STRATEGY = 11\n"
;
  }

  static const char* value(const ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ElevatorStrategyStep_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::campusrover_msgs::ElevatorStrategyStep_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUSROVER_MSGS_MESSAGE_ELEVATORSTRATEGYSTEP_H
