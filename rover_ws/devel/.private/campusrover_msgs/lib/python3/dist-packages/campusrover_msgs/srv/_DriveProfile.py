# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from campusrover_msgs/DriveProfileRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DriveProfileRequest(genpy.Message):
  _md5sum = "5377416382979c45089c79712b283109"
  _type = "campusrover_msgs/DriveProfileRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 DRIVE_PROFILE_NOUSE = 0
uint8 DRIVE_PROFILE_DEFAULT = 1
uint8 DRIVE_PROFILE_SET = 2
uint8 drive_profile

float64 acc_max 
float64 acc_step
float64 dec_max
float64 dec_step
float64 vel_tolerance
float64 profile_omega_max
float64 profile_omega_step
float64 omega_tolerance
float64 max_speed

"""
  # Pseudo-constants
  DRIVE_PROFILE_NOUSE = 0
  DRIVE_PROFILE_DEFAULT = 1
  DRIVE_PROFILE_SET = 2

  __slots__ = ['drive_profile','acc_max','acc_step','dec_max','dec_step','vel_tolerance','profile_omega_max','profile_omega_step','omega_tolerance','max_speed']
  _slot_types = ['uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drive_profile,acc_max,acc_step,dec_max,dec_step,vel_tolerance,profile_omega_max,profile_omega_step,omega_tolerance,max_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriveProfileRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.drive_profile is None:
        self.drive_profile = 0
      if self.acc_max is None:
        self.acc_max = 0.
      if self.acc_step is None:
        self.acc_step = 0.
      if self.dec_max is None:
        self.dec_max = 0.
      if self.dec_step is None:
        self.dec_step = 0.
      if self.vel_tolerance is None:
        self.vel_tolerance = 0.
      if self.profile_omega_max is None:
        self.profile_omega_max = 0.
      if self.profile_omega_step is None:
        self.profile_omega_step = 0.
      if self.omega_tolerance is None:
        self.omega_tolerance = 0.
      if self.max_speed is None:
        self.max_speed = 0.
    else:
      self.drive_profile = 0
      self.acc_max = 0.
      self.acc_step = 0.
      self.dec_max = 0.
      self.dec_step = 0.
      self.vel_tolerance = 0.
      self.profile_omega_max = 0.
      self.profile_omega_step = 0.
      self.omega_tolerance = 0.
      self.max_speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B9d().pack(_x.drive_profile, _x.acc_max, _x.acc_step, _x.dec_max, _x.dec_step, _x.vel_tolerance, _x.profile_omega_max, _x.profile_omega_step, _x.omega_tolerance, _x.max_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.drive_profile, _x.acc_max, _x.acc_step, _x.dec_max, _x.dec_step, _x.vel_tolerance, _x.profile_omega_max, _x.profile_omega_step, _x.omega_tolerance, _x.max_speed,) = _get_struct_B9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B9d().pack(_x.drive_profile, _x.acc_max, _x.acc_step, _x.dec_max, _x.dec_step, _x.vel_tolerance, _x.profile_omega_max, _x.profile_omega_step, _x.omega_tolerance, _x.max_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.drive_profile, _x.acc_max, _x.acc_step, _x.dec_max, _x.dec_step, _x.vel_tolerance, _x.profile_omega_max, _x.profile_omega_step, _x.omega_tolerance, _x.max_speed,) = _get_struct_B9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B9d = None
def _get_struct_B9d():
    global _struct_B9d
    if _struct_B9d is None:
        _struct_B9d = struct.Struct("<B9d")
    return _struct_B9d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from campusrover_msgs/DriveProfileResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DriveProfileResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "campusrover_msgs/DriveProfileResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriveProfileResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class DriveProfile(object):
  _type          = 'campusrover_msgs/DriveProfile'
  _md5sum = '5377416382979c45089c79712b283109'
  _request_class  = DriveProfileRequest
  _response_class = DriveProfileResponse
