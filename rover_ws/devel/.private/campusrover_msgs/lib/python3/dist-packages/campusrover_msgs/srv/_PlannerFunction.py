# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from campusrover_msgs/PlannerFunctionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class PlannerFunctionRequest(genpy.Message):
  _md5sum = "c60ec02ce4d0a2a87272560a3a28c93a"
  _type = "campusrover_msgs/PlannerFunctionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 MODE_GLOBAL_PATH = 1
uint8 MODE_ELEVATOR_PATH = 2
uint8 MODE_BUTTON_PARKING = 3
uint8 MODE_PULLOVER_PATH = 4
std_msgs/Bool action
std_msgs/Bool direction_inverse
std_msgs/Bool obstacle_avoidance
uint8 mode
geometry_msgs/Twist speed_parameter

================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  MODE_GLOBAL_PATH = 1
  MODE_ELEVATOR_PATH = 2
  MODE_BUTTON_PARKING = 3
  MODE_PULLOVER_PATH = 4

  __slots__ = ['action','direction_inverse','obstacle_avoidance','mode','speed_parameter']
  _slot_types = ['std_msgs/Bool','std_msgs/Bool','std_msgs/Bool','uint8','geometry_msgs/Twist']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action,direction_inverse,obstacle_avoidance,mode,speed_parameter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlannerFunctionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action is None:
        self.action = std_msgs.msg.Bool()
      if self.direction_inverse is None:
        self.direction_inverse = std_msgs.msg.Bool()
      if self.obstacle_avoidance is None:
        self.obstacle_avoidance = std_msgs.msg.Bool()
      if self.mode is None:
        self.mode = 0
      if self.speed_parameter is None:
        self.speed_parameter = geometry_msgs.msg.Twist()
    else:
      self.action = std_msgs.msg.Bool()
      self.direction_inverse = std_msgs.msg.Bool()
      self.obstacle_avoidance = std_msgs.msg.Bool()
      self.mode = 0
      self.speed_parameter = geometry_msgs.msg.Twist()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B6d().pack(_x.action.data, _x.direction_inverse.data, _x.obstacle_avoidance.data, _x.mode, _x.speed_parameter.linear.x, _x.speed_parameter.linear.y, _x.speed_parameter.linear.z, _x.speed_parameter.angular.x, _x.speed_parameter.angular.y, _x.speed_parameter.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action is None:
        self.action = std_msgs.msg.Bool()
      if self.direction_inverse is None:
        self.direction_inverse = std_msgs.msg.Bool()
      if self.obstacle_avoidance is None:
        self.obstacle_avoidance = std_msgs.msg.Bool()
      if self.speed_parameter is None:
        self.speed_parameter = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.action.data, _x.direction_inverse.data, _x.obstacle_avoidance.data, _x.mode, _x.speed_parameter.linear.x, _x.speed_parameter.linear.y, _x.speed_parameter.linear.z, _x.speed_parameter.angular.x, _x.speed_parameter.angular.y, _x.speed_parameter.angular.z,) = _get_struct_4B6d().unpack(str[start:end])
      self.action.data = bool(self.action.data)
      self.direction_inverse.data = bool(self.direction_inverse.data)
      self.obstacle_avoidance.data = bool(self.obstacle_avoidance.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B6d().pack(_x.action.data, _x.direction_inverse.data, _x.obstacle_avoidance.data, _x.mode, _x.speed_parameter.linear.x, _x.speed_parameter.linear.y, _x.speed_parameter.linear.z, _x.speed_parameter.angular.x, _x.speed_parameter.angular.y, _x.speed_parameter.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action is None:
        self.action = std_msgs.msg.Bool()
      if self.direction_inverse is None:
        self.direction_inverse = std_msgs.msg.Bool()
      if self.obstacle_avoidance is None:
        self.obstacle_avoidance = std_msgs.msg.Bool()
      if self.speed_parameter is None:
        self.speed_parameter = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.action.data, _x.direction_inverse.data, _x.obstacle_avoidance.data, _x.mode, _x.speed_parameter.linear.x, _x.speed_parameter.linear.y, _x.speed_parameter.linear.z, _x.speed_parameter.angular.x, _x.speed_parameter.angular.y, _x.speed_parameter.angular.z,) = _get_struct_4B6d().unpack(str[start:end])
      self.action.data = bool(self.action.data)
      self.direction_inverse.data = bool(self.direction_inverse.data)
      self.obstacle_avoidance.data = bool(self.obstacle_avoidance.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B6d = None
def _get_struct_4B6d():
    global _struct_4B6d
    if _struct_4B6d is None:
        _struct_4B6d = struct.Struct("<4B6d")
    return _struct_4B6d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from campusrover_msgs/PlannerFunctionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PlannerFunctionResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "campusrover_msgs/PlannerFunctionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlannerFunctionResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class PlannerFunction(object):
  _type          = 'campusrover_msgs/PlannerFunction'
  _md5sum = 'c60ec02ce4d0a2a87272560a3a28c93a'
  _request_class  = PlannerFunctionRequest
  _response_class = PlannerFunctionResponse
