# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from campusrover_msgs/ElevatorInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ElevatorInfo(genpy.Message):
  _md5sum = "c883c73d006814a134d52feb5eae455e"
  _type = "campusrover_msgs/ElevatorInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string building
int64 id
geometry_msgs/Point elevator_size 
geometry_msgs/Point elevator_door_size 
geometry_msgs/Pose outside_button_position 
geometry_msgs/Pose inside_button_position 
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['building','id','elevator_size','elevator_door_size','outside_button_position','inside_button_position']
  _slot_types = ['string','int64','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Pose','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       building,id,elevator_size,elevator_door_size,outside_button_position,inside_button_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ElevatorInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.building is None:
        self.building = ''
      if self.id is None:
        self.id = 0
      if self.elevator_size is None:
        self.elevator_size = geometry_msgs.msg.Point()
      if self.elevator_door_size is None:
        self.elevator_door_size = geometry_msgs.msg.Point()
      if self.outside_button_position is None:
        self.outside_button_position = geometry_msgs.msg.Pose()
      if self.inside_button_position is None:
        self.inside_button_position = geometry_msgs.msg.Pose()
    else:
      self.building = ''
      self.id = 0
      self.elevator_size = geometry_msgs.msg.Point()
      self.elevator_door_size = geometry_msgs.msg.Point()
      self.outside_button_position = geometry_msgs.msg.Pose()
      self.inside_button_position = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.building
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q20d().pack(_x.id, _x.elevator_size.x, _x.elevator_size.y, _x.elevator_size.z, _x.elevator_door_size.x, _x.elevator_door_size.y, _x.elevator_door_size.z, _x.outside_button_position.position.x, _x.outside_button_position.position.y, _x.outside_button_position.position.z, _x.outside_button_position.orientation.x, _x.outside_button_position.orientation.y, _x.outside_button_position.orientation.z, _x.outside_button_position.orientation.w, _x.inside_button_position.position.x, _x.inside_button_position.position.y, _x.inside_button_position.position.z, _x.inside_button_position.orientation.x, _x.inside_button_position.orientation.y, _x.inside_button_position.orientation.z, _x.inside_button_position.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.elevator_size is None:
        self.elevator_size = geometry_msgs.msg.Point()
      if self.elevator_door_size is None:
        self.elevator_door_size = geometry_msgs.msg.Point()
      if self.outside_button_position is None:
        self.outside_button_position = geometry_msgs.msg.Pose()
      if self.inside_button_position is None:
        self.inside_button_position = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.building = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.building = str[start:end]
      _x = self
      start = end
      end += 168
      (_x.id, _x.elevator_size.x, _x.elevator_size.y, _x.elevator_size.z, _x.elevator_door_size.x, _x.elevator_door_size.y, _x.elevator_door_size.z, _x.outside_button_position.position.x, _x.outside_button_position.position.y, _x.outside_button_position.position.z, _x.outside_button_position.orientation.x, _x.outside_button_position.orientation.y, _x.outside_button_position.orientation.z, _x.outside_button_position.orientation.w, _x.inside_button_position.position.x, _x.inside_button_position.position.y, _x.inside_button_position.position.z, _x.inside_button_position.orientation.x, _x.inside_button_position.orientation.y, _x.inside_button_position.orientation.z, _x.inside_button_position.orientation.w,) = _get_struct_q20d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.building
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q20d().pack(_x.id, _x.elevator_size.x, _x.elevator_size.y, _x.elevator_size.z, _x.elevator_door_size.x, _x.elevator_door_size.y, _x.elevator_door_size.z, _x.outside_button_position.position.x, _x.outside_button_position.position.y, _x.outside_button_position.position.z, _x.outside_button_position.orientation.x, _x.outside_button_position.orientation.y, _x.outside_button_position.orientation.z, _x.outside_button_position.orientation.w, _x.inside_button_position.position.x, _x.inside_button_position.position.y, _x.inside_button_position.position.z, _x.inside_button_position.orientation.x, _x.inside_button_position.orientation.y, _x.inside_button_position.orientation.z, _x.inside_button_position.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.elevator_size is None:
        self.elevator_size = geometry_msgs.msg.Point()
      if self.elevator_door_size is None:
        self.elevator_door_size = geometry_msgs.msg.Point()
      if self.outside_button_position is None:
        self.outside_button_position = geometry_msgs.msg.Pose()
      if self.inside_button_position is None:
        self.inside_button_position = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.building = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.building = str[start:end]
      _x = self
      start = end
      end += 168
      (_x.id, _x.elevator_size.x, _x.elevator_size.y, _x.elevator_size.z, _x.elevator_door_size.x, _x.elevator_door_size.y, _x.elevator_door_size.z, _x.outside_button_position.position.x, _x.outside_button_position.position.y, _x.outside_button_position.position.z, _x.outside_button_position.orientation.x, _x.outside_button_position.orientation.y, _x.outside_button_position.orientation.z, _x.outside_button_position.orientation.w, _x.inside_button_position.position.x, _x.inside_button_position.position.y, _x.inside_button_position.position.z, _x.inside_button_position.orientation.x, _x.inside_button_position.orientation.y, _x.inside_button_position.orientation.z, _x.inside_button_position.orientation.w,) = _get_struct_q20d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q20d = None
def _get_struct_q20d():
    global _struct_q20d
    if _struct_q20d is None:
        _struct_q20d = struct.Struct("<q20d")
    return _struct_q20d
