# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from campusrover_msgs/ElevatorStrategyStep.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ElevatorStrategyStep(genpy.Message):
  _md5sum = "ab7d8f1b7ce78283504b9bd3659c36b7"
  _type = "campusrover_msgs/ElevatorStrategyStep"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 STANDBY = 0
uint16 MOVE_TO_CHECK_OUTSIDE_BUTTON = 1
uint16 PRESS_OUTSIDE_BUTTON = 2
uint16 MOVE_TO_OUTSIDE_STANDBY_POSITION = 3
uint16 WAIT_FOR_OUTSIDE_DOOR_OPEN = 4
uint16 MOVE_TO_ELEVATOR_CENTER = 5
uint16 MOVE_TO_CHECK_ELEVATOR_BUTTON = 6
uint16 PRESS_ELEVATOR_BUTTON = 7
uint16 MOVE_TO_ELEVATOR_STANDBY_POSITION = 8
uint16 WAIT_FOR_ELEVATOR_ARRIVE_AND_DOOR_OPEN = 9
uint16 LEAVE_ELEVATOR = 10
uint16 COMPLETE_ELEVATOR_STRATEGY = 11
"""
  # Pseudo-constants
  STANDBY = 0
  MOVE_TO_CHECK_OUTSIDE_BUTTON = 1
  PRESS_OUTSIDE_BUTTON = 2
  MOVE_TO_OUTSIDE_STANDBY_POSITION = 3
  WAIT_FOR_OUTSIDE_DOOR_OPEN = 4
  MOVE_TO_ELEVATOR_CENTER = 5
  MOVE_TO_CHECK_ELEVATOR_BUTTON = 6
  PRESS_ELEVATOR_BUTTON = 7
  MOVE_TO_ELEVATOR_STANDBY_POSITION = 8
  WAIT_FOR_ELEVATOR_ARRIVE_AND_DOOR_OPEN = 9
  LEAVE_ELEVATOR = 10
  COMPLETE_ELEVATOR_STRATEGY = 11

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ElevatorStrategyStep, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
