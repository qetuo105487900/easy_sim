# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from button_recognition/recognition.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class recognition(genpy.Message):
  _md5sum = "46ce2b8843cab8e05556ebbba9c830ef"
  _type = "button_recognition/recognition"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 y_min
int32 x_min
int32 y_max
int32 x_max
int32 categ
float32 score
float32 activate_score
float32 belief
string text"""
  __slots__ = ['y_min','x_min','y_max','x_max','categ','score','activate_score','belief','text']
  _slot_types = ['int32','int32','int32','int32','int32','float32','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       y_min,x_min,y_max,x_max,categ,score,activate_score,belief,text

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(recognition, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.y_min is None:
        self.y_min = 0
      if self.x_min is None:
        self.x_min = 0
      if self.y_max is None:
        self.y_max = 0
      if self.x_max is None:
        self.x_max = 0
      if self.categ is None:
        self.categ = 0
      if self.score is None:
        self.score = 0.
      if self.activate_score is None:
        self.activate_score = 0.
      if self.belief is None:
        self.belief = 0.
      if self.text is None:
        self.text = ''
    else:
      self.y_min = 0
      self.x_min = 0
      self.y_max = 0
      self.x_max = 0
      self.categ = 0
      self.score = 0.
      self.activate_score = 0.
      self.belief = 0.
      self.text = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5i3f().pack(_x.y_min, _x.x_min, _x.y_max, _x.x_max, _x.categ, _x.score, _x.activate_score, _x.belief))
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.y_min, _x.x_min, _x.y_max, _x.x_max, _x.categ, _x.score, _x.activate_score, _x.belief,) = _get_struct_5i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5i3f().pack(_x.y_min, _x.x_min, _x.y_max, _x.x_max, _x.categ, _x.score, _x.activate_score, _x.belief))
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.y_min, _x.x_min, _x.y_max, _x.x_max, _x.categ, _x.score, _x.activate_score, _x.belief,) = _get_struct_5i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i3f = None
def _get_struct_5i3f():
    global _struct_5i3f
    if _struct_5i3f is None:
        _struct_5i3f = struct.Struct("<5i3f")
    return _struct_5i3f
