;; Auto-generated. Do not edit!


(when (boundp 'button_recognition::recog_server)
  (if (not (find-package "BUTTON_RECOGNITION"))
    (make-package "BUTTON_RECOGNITION"))
  (shadow 'recog_server (find-package "BUTTON_RECOGNITION")))
(unless (find-package "BUTTON_RECOGNITION::RECOG_SERVER")
  (make-package "BUTTON_RECOGNITION::RECOG_SERVER"))
(unless (find-package "BUTTON_RECOGNITION::RECOG_SERVERREQUEST")
  (make-package "BUTTON_RECOGNITION::RECOG_SERVERREQUEST"))
(unless (find-package "BUTTON_RECOGNITION::RECOG_SERVERRESPONSE")
  (make-package "BUTTON_RECOGNITION::RECOG_SERVERRESPONSE"))

(in-package "ROS")

(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))




(defclass button_recognition::recog_serverRequest
  :super ros::object
  :slots (_image ))

(defmethod button_recognition::recog_serverRequest
  (:init
   (&key
    ((:image __image) (instance sensor_msgs::Image :init))
    )
   (send-super :init)
   (setq _image __image)
   self)
  (:image
   (&rest __image)
   (if (keywordp (car __image))
       (send* _image __image)
     (progn
       (if __image (setq _image (car __image)))
       _image)))
  (:serialization-length
   ()
   (+
    ;; sensor_msgs/Image _image
    (send _image :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; sensor_msgs/Image _image
       (send _image :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; sensor_msgs/Image _image
     (send _image :deserialize buf ptr-) (incf ptr- (send _image :serialization-length))
   ;;
   self)
  )

(defclass button_recognition::recog_serverResponse
  :super ros::object
  :slots (_box ))

(defmethod button_recognition::recog_serverResponse
  (:init
   (&key
    ((:box __box) (instance button_recognition::recog_result :init))
    )
   (send-super :init)
   (setq _box __box)
   self)
  (:box
   (&rest __box)
   (if (keywordp (car __box))
       (send* _box __box)
     (progn
       (if __box (setq _box (car __box)))
       _box)))
  (:serialization-length
   ()
   (+
    ;; button_recognition/recog_result _box
    (send _box :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; button_recognition/recog_result _box
       (send _box :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; button_recognition/recog_result _box
     (send _box :deserialize buf ptr-) (incf ptr- (send _box :serialization-length))
   ;;
   self)
  )

(defclass button_recognition::recog_server
  :super ros::object
  :slots ())

(setf (get button_recognition::recog_server :md5sum-) "3e93f1b70ee662ac10c8c863201cbf9c")
(setf (get button_recognition::recog_server :datatype-) "button_recognition/recog_server")
(setf (get button_recognition::recog_server :request) button_recognition::recog_serverRequest)
(setf (get button_recognition::recog_server :response) button_recognition::recog_serverResponse)

(defmethod button_recognition::recog_serverRequest
  (:response () (instance button_recognition::recog_serverResponse :init)))

(setf (get button_recognition::recog_serverRequest :md5sum-) "3e93f1b70ee662ac10c8c863201cbf9c")
(setf (get button_recognition::recog_serverRequest :datatype-) "button_recognition/recog_serverRequest")
(setf (get button_recognition::recog_serverRequest :definition-)
      "sensor_msgs/Image image

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
---
recog_result box


================================================================================
MSG: button_recognition/recog_result
recognition[] data

================================================================================
MSG: button_recognition/recognition
int32 y_min
int32 x_min
int32 y_max
int32 x_max
int32 categ
float32 score
float32 activate_score
float32 belief
")

(setf (get button_recognition::recog_serverResponse :md5sum-) "3e93f1b70ee662ac10c8c863201cbf9c")
(setf (get button_recognition::recog_serverResponse :datatype-) "button_recognition/recog_serverResponse")
(setf (get button_recognition::recog_serverResponse :definition-)
      "sensor_msgs/Image image

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
---
recog_result box


================================================================================
MSG: button_recognition/recog_result
recognition[] data

================================================================================
MSG: button_recognition/recognition
int32 y_min
int32 x_min
int32 y_max
int32 x_max
int32 categ
float32 score
float32 activate_score
float32 belief
")



(provide :button_recognition/recog_server "3e93f1b70ee662ac10c8c863201cbf9c")


