// Generated by gencpp from file button_recognition/recognition.msg
// DO NOT EDIT!


#ifndef BUTTON_RECOGNITION_MESSAGE_RECOGNITION_H
#define BUTTON_RECOGNITION_MESSAGE_RECOGNITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace button_recognition
{
template <class ContainerAllocator>
struct recognition_
{
  typedef recognition_<ContainerAllocator> Type;

  recognition_()
    : y_min(0)
    , x_min(0)
    , y_max(0)
    , x_max(0)
    , categ(0)
    , score(0.0)
    , activate_score(0.0)
    , belief(0.0)
    , text()  {
    }
  recognition_(const ContainerAllocator& _alloc)
    : y_min(0)
    , x_min(0)
    , y_max(0)
    , x_max(0)
    , categ(0)
    , score(0.0)
    , activate_score(0.0)
    , belief(0.0)
    , text(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _y_min_type;
  _y_min_type y_min;

   typedef int32_t _x_min_type;
  _x_min_type x_min;

   typedef int32_t _y_max_type;
  _y_max_type y_max;

   typedef int32_t _x_max_type;
  _x_max_type x_max;

   typedef int32_t _categ_type;
  _categ_type categ;

   typedef float _score_type;
  _score_type score;

   typedef float _activate_score_type;
  _activate_score_type activate_score;

   typedef float _belief_type;
  _belief_type belief;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;





  typedef boost::shared_ptr< ::button_recognition::recognition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::button_recognition::recognition_<ContainerAllocator> const> ConstPtr;

}; // struct recognition_

typedef ::button_recognition::recognition_<std::allocator<void> > recognition;

typedef boost::shared_ptr< ::button_recognition::recognition > recognitionPtr;
typedef boost::shared_ptr< ::button_recognition::recognition const> recognitionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::button_recognition::recognition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::button_recognition::recognition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::button_recognition::recognition_<ContainerAllocator1> & lhs, const ::button_recognition::recognition_<ContainerAllocator2> & rhs)
{
  return lhs.y_min == rhs.y_min &&
    lhs.x_min == rhs.x_min &&
    lhs.y_max == rhs.y_max &&
    lhs.x_max == rhs.x_max &&
    lhs.categ == rhs.categ &&
    lhs.score == rhs.score &&
    lhs.activate_score == rhs.activate_score &&
    lhs.belief == rhs.belief &&
    lhs.text == rhs.text;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::button_recognition::recognition_<ContainerAllocator1> & lhs, const ::button_recognition::recognition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace button_recognition

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::button_recognition::recognition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::button_recognition::recognition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::button_recognition::recognition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::button_recognition::recognition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::button_recognition::recognition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::button_recognition::recognition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::button_recognition::recognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46ce2b8843cab8e05556ebbba9c830ef";
  }

  static const char* value(const ::button_recognition::recognition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46ce2b8843cab8e0ULL;
  static const uint64_t static_value2 = 0x5556ebbba9c830efULL;
};

template<class ContainerAllocator>
struct DataType< ::button_recognition::recognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "button_recognition/recognition";
  }

  static const char* value(const ::button_recognition::recognition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::button_recognition::recognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 y_min\n"
"int32 x_min\n"
"int32 y_max\n"
"int32 x_max\n"
"int32 categ\n"
"float32 score\n"
"float32 activate_score\n"
"float32 belief\n"
"string text\n"
;
  }

  static const char* value(const ::button_recognition::recognition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::button_recognition::recognition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.y_min);
      stream.next(m.x_min);
      stream.next(m.y_max);
      stream.next(m.x_max);
      stream.next(m.categ);
      stream.next(m.score);
      stream.next(m.activate_score);
      stream.next(m.belief);
      stream.next(m.text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct recognition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::button_recognition::recognition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::button_recognition::recognition_<ContainerAllocator>& v)
  {
    s << indent << "y_min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_min);
    s << indent << "x_min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_min);
    s << indent << "y_max: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_max);
    s << indent << "x_max: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_max);
    s << indent << "categ: ";
    Printer<int32_t>::stream(s, indent + "  ", v.categ);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "activate_score: ";
    Printer<float>::stream(s, indent + "  ", v.activate_score);
    s << indent << "belief: ";
    Printer<float>::stream(s, indent + "  ", v.belief);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BUTTON_RECOGNITION_MESSAGE_RECOGNITION_H
