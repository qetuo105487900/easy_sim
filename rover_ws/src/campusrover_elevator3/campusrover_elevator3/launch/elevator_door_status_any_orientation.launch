<launch>

    <arg name="use_velodyne_to_2d"        default="false"/>
    <arg if="$(arg use_velodyne_to_2d)"  name="scan2" default="/velodyne_to_laserscan"/>
    <arg unless="$(arg use_velodyne_to_2d)"  name="scan2" default="/filtered_scan"/>

    <!-- run pointcloud_to_laserscan node -->
    <node if="$(arg use_velodyne_to_2d)" pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan2">

        <remap from="cloud_in" to="velodyne_points"/>
        <remap from="scan" to="velodyne_to_laserscan"/>
        <rosparam>
            min_height: -1
            max_height: 0.1

            angle_min: -3.14 # -M_PI/2
            angle_max: 3.14 # M_PI/2
            angle_increment: 0.0058 # M_PI/3.14
            scan_time: 0.3333
            range_min: 0.05
            range_max: 10.0
            use_inf: true
            inf_epsilon: 1.0

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>

    </node>
    
    <node pkg="campusrover_elevator3" type="elevator_door_status_any_orientation" name="elevator_door_status_any_orientation" output="screen">
        <remap from="scan2"    to="$(arg scan2)" />
        <remap from="pointcloud"    to="velodyne_points" />
        <param name="elevator_depth" value="1.34" />
        <param name="elevator_door_depth" value="0.29" />
        <param name="elevator_width_l" value="0.7" />
        <param name="elevator_width_r" value="-0.7" />
        <param name="door_offset" value="0.15" />
        <param name="door_open_threshold" value="0.1" />
        <param name="stuck_threshold" value="0.1" />  
        <param name="use_velodyne" value="true" />        
    </node>
</launch>
